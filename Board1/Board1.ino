#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/c162aad9-e074-4d1b-adf9-460caf4061c4 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humidity;
  float rainfall;
  float temperature;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "DHT.h"
#include "RTClib.h"
#include <Wire.h>

#define DHTPIN 4     
#define DHTTYPE DHT22   
DHT dht(DHTPIN, DHTTYPE);
#define RainPin 2 

bool bucketPositionA = false;             // one of the two positions of tipping-bucket               
const double bucketAmount = 0.4090909;   // inches equivalent of ml to trip tipping-bucket
double dailyRain = 0.0;                   // rain accumulated for the day
double minuteRain = 0.0;                  // rain accumulated for one hour
double dailyRain_till_LastMinute = 0.0;     // rain accumulated for the day till the last hour          
bool first;                               // as we want readings of the (MHz) loops only at the 0th moment 

RTC_Millis rtc;

float humidityCorrectionFactor = 0.87;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  dht.begin();
  rtc.begin(DateTime(__DATE__, __TIME__));       // start the RTC
  pinMode(RainPin, INPUT);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  //delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 

  onHumidityChange();
  onRainfallChange();
  delay(2000);
}

/*
  Since Temperature is READ_WRITE variable, onTemperatureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureChange() {
  // Add your code here to act upon Temperature change
  
}

/*
  Since Humidity is READ_WRITE variable, onHumidityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidityChange() {
  // Add your code here to act upon Humidity change
  temperature = dht.readTemperature();
  humidity = dht.readHumidity();
  humidity *= humidityCorrectionFactor;
}

/*
  Since Rainfall is READ_WRITE variable, onRainfallChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRainfallChange() {
  // Add your code here to act upon Rainfall change
  DateTime now = rtc.now();

  if ((bucketPositionA==false)&&(digitalRead(RainPin)==HIGH)){
    bucketPositionA=true;
    dailyRain+=bucketAmount;                               // update the daily rain
  }
  
  if ((bucketPositionA==true)&&(digitalRead(RainPin)==LOW)){
    bucketPositionA=false;  
  } 

  if(now.second() != 0) first = true;

  if(now.second() == 0 && first == true) {
  minuteRain = dailyRain - dailyRain_till_LastMinute;      // calculate the last hour's rain
  dailyRain_till_LastMinute = dailyRain;                   // update the rain till last hour for next calculation

  Serial.print("Rain in last minute = ");
  Serial.print(minuteRain,2);
  Serial.println("mm");

  first = false;                                        // execute calculations only once per hour

  if(now.minute()== 0) {
  dailyRain = 0.0;                                      // clear daily-rain at midnight
  dailyRain_till_LastMinute = 0.0;                        // we do not want negative rain at 01:00
  }
  }
  rainfall = minuteRain;
}
