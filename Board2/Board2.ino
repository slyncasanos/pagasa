#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/2c942907-ea53-429c-b7d1-9f3944383c7e 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float flow;
  float level;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <NewPing.h>

#define SENSOR  27 
#define echoPin 18 // attach pin GPIO18 to pin Echo of JSN-SR04
#define trigPin 5  // attach pin GPIO5 ESP32 to pin Trig of JSN-SR04                     
#define MAX_DISTANCE 200

long duration; // Time taken for the pulse to reach the receiver
int distance; 

long currentMillis = 0;
long previousMillis = 0;
int interval = 1000;
float calibrationFactor = 4.5;
volatile byte pulseCount;
byte pulse1Sec = 0;
float flowRate;
unsigned int flowMilliLitres;
unsigned long totalMilliLitres;
NewPing sonar(trigPin, echoPin, MAX_DISTANCE); // NewPing object
float waterLevel;

void IRAM_ATTR pulseCounter()
{
  pulseCount++;
}

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  pinMode(SENSOR, INPUT_PULLUP);
  pinMode(trigPin, OUTPUT); 
  pinMode(echoPin, INPUT);

  pulseCount = 0;
  flowRate = 0.0;
  flowMilliLitres = 0;
  totalMilliLitres = 0;
  previousMillis = 0;

  attachInterrupt(digitalPinToInterrupt(SENSOR), pulseCounter, FALLING);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  onFlowChange();
  delay(2000);  
}



/*
  Since Flow is READ_WRITE variable, onFlowChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFlowChange()  {
  // Add your code here to act upon Flow change
   currentMillis = millis();
  if (currentMillis - previousMillis > interval) {

  pulse1Sec = pulseCount;
  pulseCount = 0;

  flowRate = ((1000.0 / (millis() - previousMillis)) * pulse1Sec) / calibrationFactor;   previousMillis = millis();
  flowMilliLitres = (flowRate / 60) * 1000;
  totalMilliLitres += flowMilliLitres;
    // Print the flow rate for this second in litres / minute

  digitalWrite(trigPin, LOW);
  delayMicroseconds(5); 

  digitalWrite(trigPin, HIGH); // turn on the Trigger to generate pulse
  delayMicroseconds(10); // keep the trigger "ON" for 10 ms to generate pulse
  digitalWrite(trigPin, LOW); // Turn off the pulse trigger to stop pulse

  // If pulse reached the receiver echoPin
  // become high Then pulseIn() returns the
  // time taken by the pulse to reach the receiver
  //duration = pulseIn(echoPin, HIGH);
  //distance = duration * 0.0344 / 2; 
  unsigned int distance = sonar.ping_cm();

  // Speed of sound in air at 20 degrees Celsius is approximately 343 meters per second
  // Convert microseconds to seconds by dividing by 1000000
  // Divide by 2 to account for round trip travel time
  waterLevel = MAX_DISTANCE - distance;

  Serial.print("Flow rate: ");
  Serial.print(float(flowRate));  // Print the integer part of the variable
  Serial.println(" L/min");
  Serial.print("Water Level: ");
  Serial.print(waterLevel);
  Serial.println(" cm");
  delay(1000);
  }

  flow = flowRate;
  level = waterLevel;
}

/*
  Since Level is READ_WRITE variable, onLevelChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLevelChange()  {
  // Add your code here to act upon Level change
}
